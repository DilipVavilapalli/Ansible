---
- name: default set
  set_fact:
    prior_install: "unknown"
    proceed: 0
    


#- name: perform all tasks
#  include_tasks: apache.yml
#  when:
   # - ansible_facts.distribution in ['Ubuntu']
 #   - install == 'yes'
#- name: perform all tasks
#  include_tasks: debug.yml
 # when:
  #  - ansible_facts.distribution in ['Ubuntu']
 #   - install == 'yes'
- name: list hostname
  set_fact:
    hostips: "{{ groups['potu'] }}"
  
  


- name: msster_ip
  set_fact:
    slave_ip: "{{ slave_ip | default([]) + [item] }}"
  when: "'{{ item }}' != '{{ master_ip }}'"
  with_items: "{{ hostips }}"

- name: print slave
  debug:
    var: slave_ip
    
- name: createslavedir
  shell: mkdir /home/slaveipdr
  delegate_to: "{{ item }}"
  with_items: "{{ slave_ip }}"

    
- name: print ip
  set_fact:
    ip_3: "{{ hostvars[inventory_hostname]['ansible_all_ipv4_addresses'] }}"
    ip_hostname: "{{ ansible_fqdn.split('.')[0] }}"
  when: "'{{ ansible_fqdn.split('.')[0] }}' != '{{ master_active }}'"

- name: list hostname
  debug:
    msg: "{{ groups['potu'] }}"
- name: gtsluton
  set_fact:
    ip_hostname_gl: "{{ hostvars[item]['ip_hostname'] }}"
  with_items: "{{ groups['potu'] }}"
    
- name: vars lookup
  ansible.builtin.set_fact:
    host_name: "{{ item }}"
  with_inventory_hostnames:
    - all
    
- name: ipprint
  debug:
    var: ip_3
- name: pirinty
  debug:
    var: ip_hostnam
  
- name: create "{{ ip_hostname_gl }}" dir in all
  shell:  mkdir "/home/{{ ip_hostname_gl }}"  

- name: ip_3dir
  shell: mkdir /home/delegate
  delegate_to: "{{ item }}"
  with_items:
    - "{{ ip_3 }}"
  
- name: get service facts
  ansible.builtin.service_facts:

- name: setfact1
  ansible.builtin.set_fact:
    ip_1: "{{ ansible_host }}"
  when: server_id != "2000"

- name: setfact2
  ansible.builtin.set_fact:
    ip_2: "{{ ansible_host }}"
  when: server_id == "2000" 
  
- name: touch file1
  shell: touch ~/potu2
  delegate_to: "{{ ip_1 }}"
  when: ip_1 is defined
 
- name: touch file3
  shell: touch /home/filepotuu1
  delegate_to: "{{ ip_2 }}"
  when: ip_2 is defined
  
- name: try to work out how to access the service
  debug:
    var: ansible_facts.services["NetworkManager-wait-online.service"]
  register: statusde
  
- name: edit sudo
  ansible.builtin.blockinfile:
    path: /etc/sudoers
    insertafter: 'root     ALL=(ALL)      ALL'
    block: |
      # give root
      %DBaas_Admins        ALL=(ALL)      ALL

- name: template sssd
  ansible.builtin.template:
    src: "tempsssd.j2"
    dest: /etc/selinux/targeted/active/modules/100/sssddbsssd.conf
    mode: '600'
 
- name: status
  shell: systemctl stop httpd
  when:
    - hostvars[inventory_hostname]['services']["NetworkManager-wait-online.service"]['state'] == "stopped"


- name: create dir
  shell: mkdir "{{ dest[0] }}/newdir4"
  register: dir
#- name: setfact check
 # set_fact:
  #  proceed: 1
  #when: 
  #- prior_install == 'done'
- name: debug
  debug:
    var: dir
 #   var: role_path
 
- name: chdir
  command: chdir=/home/saikiran
    mkdir chdir

  #when: 
  #- proceed == 1
- name: perform log task
  include_tasks: log.yml
  when:
  #  - ansible_facts.distribution in ['Ubuntu']
    - install == 'yes'
